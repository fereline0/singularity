datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  roleId                String?
  role                  UserRole?              @relation(fields: [roleId], references: [id])
  detailInformation     UserDetailInformation?
  comments              UserComment[]          @relation("user")
  writedComments        UserComment[]          @relation("writer")
  bans                  UserBans[]             @relation("user")
  bansInitiator         UserBans[]             @relation("initiator")
  articles              Article[]
  writedArticleComments ArticleComments[]
  administeredSections  Section[]
  accounts              Account[]
  sessions              Session[]
}

model UserBans {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  user        User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  reason      String
  activity    Boolean  @default(true)
  expires     DateTime
  initiator   User     @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId String
}

model UserRole {
  id       String @id @default(cuid())
  name     String @unique
  position Int    @unique

  users     User[]
  abilities RoleAbility[]
}

model RoleAbility {
  id   String @id @default(cuid())
  slug String @unique

  roles UserRole[]
}

model UserComment {
  id        String   @id @default(cuid())
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  parent   UserComment?  @relation("UserComment", fields: [parentId], references: [id], onDelete: Cascade)
  childs   UserComment[] @relation("UserComment")
  writerId String
  writer   User          @relation("writer", fields: [writerId], references: [id], onDelete: Cascade)
  userId   String
  user     User          @relation("user", fields: [userId], references: [id], onDelete: Cascade)
}

model UserDetailInformation {
  id         String    @id @default(cuid())
  aboutMe    String?
  occupation String?
  interests  String?
  gender     String?
  bithday    DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Section {
  id          String @id @default(cuid())
  name        String
  description String

  parentId    String?
  parent      Section?  @relation("Section", fields: [parentId], references: [id], onDelete: Cascade)
  childs      Section[] @relation("Section")
  articles    Article[]
  supervisors User[]
}

model Article {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  value     String

  comments  ArticleComments[]
  writerId  String
  writer    User              @relation(fields: [writerId], references: [id], onDelete: Cascade)
  sectionId String
  section   Section           @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model ArticleComments {
  id        String   @id @default(cuid())
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId  String?
  parent    ArticleComments?  @relation("ArticleComments", fields: [parentId], references: [id])
  childs    ArticleComments[] @relation("ArticleComments")
  writerId  String
  writer    User              @relation(fields: [writerId], references: [id], onDelete: Cascade)
  articleId String
  article   Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
