datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  email             String?                @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  roleId            String?
  role              UserRole?              @relation(fields: [roleId], references: [id])
  detailInformation UserDetailInformation?
  subscribed        UserSubscribers[]      @relation("subscriber")
  subscribers       UserSubscribers[]      @relation("user")
  comments          UserComment[]          @relation("user")
  writerComments    UserComment[]          @relation("writer")
  bans              UserBans[]             @relation("user")
  bansInitiator     UserBans[]             @relation("initiator")
  accounts          Account[]
  sessions          Session[]
}

model UserBans {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  user        User     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  reason      String
  activity    Boolean  @default(true)
  expires     DateTime
  initiator   User     @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  initiatorId String
}

model UserSubscribers {
  id String @id @default(cuid())

  subscriberId String
  subscriber   User   @relation("subscriber", fields: [subscriberId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("user", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([subscriberId, userId])
}

model UserRole {
  id    String @id @default(cuid())
  name  String @unique
  color String @unique

  users     User[]
  abilities RoleAbility[]
}

model RoleAbility {
  id   String @id @default(cuid())
  slug String @unique

  roles UserRole[]
}

model UserComment {
  id        String   @id @default(cuid())
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  parent   UserComment?  @relation("UserComment", fields: [parentId], references: [id], onDelete: Cascade)
  childs   UserComment[] @relation("UserComment")
  writerId String
  writer   User          @relation("writer", fields: [writerId], references: [id], onDelete: Cascade)
  userId   String
  user     User          @relation("user", fields: [userId], references: [id], onDelete: Cascade)
}

model UserDetailInformation {
  id         String    @id @default(cuid())
  aboutMe    String?
  occupation String?
  interests  String?
  gender     String?
  bithday    DateTime?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
